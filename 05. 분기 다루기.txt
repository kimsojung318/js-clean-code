5-1. 값식문
    - 삼항연산자는 값으로 귀결될 수 있다.
    - 객체의 값에 식도 들어갈 수 있다.
    - 값과 식을 사용한 논리를 이용하여 분기를 태울 수 있다.
	
5-2.  삼항 연산자 다루기
    - 조건 ? 참[식] : 거짓[식]
    - 3개의 피연산자를 사용
    
    5-2-1. 코드 예제
    	- 삼항연산자 → if문 → switch문
        
        // 삼항연산자 예제
        function example() {
        	return condition1 
        		? value1 : condition2 
        		? value2 : condition3 
        		? value3 : value4;
        }
        
        // 위와 식은 다르지만 동일한 예제
        function example() {
        	if (condition1) {
        		return value1;
        	} else if (condition2) {
        		return value2;
        	} else if (condition3) {
        		return value3;
        	} else {
        		return value4;
        	}
        }
        
        // 가독성 있게 변경
        function example() {
        	const temp = condition;
        	switch(key){
        		case value;
        			break;
        		default:
        			break;
        	}
        }
        
    	- 괄호 사용하여 표현하기
        
        const example = condition1
        	? (a === 0 ? 'zero' : 'positive')
        	: 'negative';
        
    	- Nullable Type이 있을 경우 대비
        
        const welcomeMessage = (isLogin) => {
        	const name = isLogin ? getName() : '이름없음';
        	
        	return '안녕하세요. ${name}';
        };
        
        const welcomeMessage = (isLogin) => {	
        	if(isLogin) {
        		return '안녕하세요. ${getName()}';
        	}
        	
        	return '안녕하세요. 이름없음';
        };
        
    	- 좋지 않은 예제 : 삼항연산자를 사용하여 식 실행
        
        // alert void이기 때문에 반환값이 없다.
        // 삼항연산자보다 if문이 더 낫다고 판단
        function alertMessage(isAdult){
        	isAdult 
        		? alert('입장이 가능합니다.') // undefind
        		: alert('입장이 불가능합니다.'); // undefind
        }
        
        // 명확하게 변경
        function alertMessage(isAdult){
        	return isAdult ? '입장이 가능합니다.' : '입장이 불가능합니다.';
        }
        
5-3. Truthy & Falsy
    
    5-3-1. 코드 예제
    	- 참 혹은 거짓같은 값
        
        // 전부 참으로 평가되는 코드
        if('string'.length > 0){}
        if(!isNaN(10)){}
        if(boolean === true){}
        
        // 전부 거짓으로 평가되는 코드
        if(false){}
        if(0){}
        if(NaN){}
        if(""){}

    	- 사용 예제
        
        function printName(name){
        	if(name === undefined || name === null){
        		return "사람이 없다.";
        	}
        	return "안녕하세요. "+ name +"님";
        }
        
        printName(); // 사람이 없다.
        
        // if문 undefined 조건을 제외한 경우 
        printName(); // 안녕하세요. undefined님
        
        // if문 null 조건을 제외한 경우
        var customer = "wonpil";
        var customer = null;
        printName(customer); // 안녕하세요. null님
        
        // 코드 변경
        function printName(name){
        	// if(name || !name){
        	if(name){
        		return "사람이 없다.";
        	}
        	return "안녕하세요. "+ name +"님";
        }
        
5-4. 단축평가 (short-circuit evaluation)
    
    5-4-1. 코드 예제
    	- 기본 예제
        
        // AND
        true && true && '도달 0' // 도달 0
        true && false && '도달 X' // false
        
        // OR
        false || false || '도달 0' // 도달 0 
        true || true || '도달 X' // true
        
    	- OR 단축 평가 1
        
        function fetchData(){
        	/*if(state.data){
        		return state.data
        	} else {
        		return "Fetching...";
        	}
        
        	// Default값을 표현할 때 삼항 연산자가 편리하다.
        	return state.data ? sate.data : "Fetching...";*/
        
        	// OR 단축 평가
        	return state.data || "Fetching...";
        }
        
    	- OR 단축 평가 2
        
        function favoriteDog(someDog){
        	/*let favoriteDog;
        
        	if(someDog) {
        		favoriteDog = dog;
        	} else {
        		favoriteDog = "냐옹";
        	}
        	return favoriteDog + "입니다.";*/
        
        	// OR 단축 평가
        	return (someDog || "냐옹") + "입니다.";
        }
        
        favoriteDog() // 냐옹
        favoriteDog("뭉이") // 뭉이입니다.
        
    	- OR 단축 평가 3
        
        function getActiveUserName(user, isLogin){
        	/*if(isLogin && user) {
        		return user.name;
        	} else {
        		return "이름없음";
        	}*/
        
        	// 단축 평가
        	if(isLogin && user){
        		return user.name || "이름없음";
        	}
        }
        
5-5. else if 피하기
    - else if를 반복적으로 사용하는 것 지양하기
    
    5-5-1. 코드 예제
	
    const x = 1;
    
    if(x >= 0){
    	console.log("x는 0과 같거나 크다.");
    } else if(x > 0){
    	console.log("x는 0보다 크다.");
    }
    
    // 위 아래 예제는 논리가 동일
    
    if(x >= 0){
    	console.log("x는 0과 같거나 크다.");
    } else {
    	if(x > 0){
    		console.log("x는 0보다 크다.");
    	}
    }

5-6. else 피하기
    5-6-1. 코드 예제
    
    	- 기본 예제
        
        function getActiveUserName() {
        	if(user.name) {
        		return user.name
        	}/*else {
        		return "이름없음";
        	}*/
        	return "이름없음";
        }
        
    	- 함수가 두 가지 기능을 할 때 오류 발생 가능성
        
        // age가 20 미만일 때 특수 함수 실행
        
        function getHelloCustomer(user) {
        	if(user.age < 20) {
        		report(user);
        	}/*else { 
        		return "안녕하세요.";
        	}*/
        
        	return "안녕하세요.";
        }

5-7. Early Return
    - 함수를 미리 종료한다.
    - 사고하기 편하다.
    - 하나의 로직이 많은 의존성을 가지고 있을 때 Early Return으로 코드를 분리하면 로직의 흐름이 더 간단하고 명확해진다.
    
    5-7-1. 코드 예제

    // 원본
    function loginService(isLogin, user) {
    	if (!isLogin) { // 1. 로그인 여부
    		if (checkToken()) { // 2. 토큰 존재 여부
    			if (!user.nickName) { // 3. 기가입자 확인
    				return registerUser(user);
    			} else {
    				refreshToken();
    				return "로그인 성공";
    			}
    		} else {
    			throw new Error("No Token");
    		}
    	}
    }
    
    // 수정
    function loginService(isLogin, user) {
    	// Early Return 
    	if (isLogin) { // 1. 로그인 여부
    		return;
    	}
    
    	if (!checkToken()) { // 2. 토큰 존재 여부
    		throw new Error("No Token");
    	}
    
    	if (!user.nickName) { // 3. 기가입자 확인
    		return registerUser(user);
    	}
    	
    	login();
    }
    
    function login() {
    	refreshToken();
    	return "로그인 성공";
    }
    
	// 원본
    function oneDay(condition, weather, isJob) {
    	if (condition === "GOOD") {
    		study();
    		game();
    		youtube();
    
    		if (weather === "GOOD") {
    			exercise();
    			wash();
    		}
    
    		if (isJob === = "GOOD") {
    			nightWork();
    			earlySleep();
    		}
    	}
    }
    
	// 수정
    function oneDay(condition, weather, isJob) {
    	if (condition != "GOOD") {
    		return
    	}
    	
    	study();
    	game();
    	youtube();
    
    	if (weather === "GOOD") {
    		exercise();
    		wash();
    	}
    
    	if (isJob === = "GOOD") {
    		nightWork();
    		earlySleep();
    	}
    }
    
5-8. 부정 조건문 지양하기
    - 지양해야하는 이유
        ⊙ 생각을 여러 번 해야할 수 있다.
        ⊙ 프로그래밍 언어 자체로 if문이 처음부터 오고 true부터 실행 시킨다.
    - 사용해야할 때 (부정 조건 예외)
        ⊙ Early Return
        ⊙ 유효성 검사
        ⊙ 보안 혹은 검사하는 로직
    
    5-8-2. 코드 예제
   
        const isCondition = true;
        const isNotCondition = false;
        
        // 숫자일 때만
        function isNumber(num) {
        	return !Number.isNaN(num) && typeof num === "number";
        }
        if(isNumber(3)) {
        	console.log("숫자인 경우 실행");
        }
        
        if(!isCondition) {
        	console.log("거짓인 경우 실행");
        }
        
        if(!isNotCondition) {
        	console.log("거짓인 경우 실행");
        }